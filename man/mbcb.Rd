% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mbcb.R
\name{mbcb}
\alias{mbcb}
\title{Model-based concordance for benefit (mbcb)}
\usage{
mbcb(y0hat, y1hat, y0hat.updated = NULL, y1hat.updated = NULL)
}
\arguments{
\item{y0hat}{Predicted outcome under control treatment.}

\item{y1hat}{Predicted outcome under treatment.}

\item{y0hat.updated}{Predicted outcome under control treatment based on an
updated model (e.g., based on validation data)}

\item{y1hat.updated}{Predicted outcome under treatment based on an
updated model (e.g., based on validation data)}
}
\value{
The model-based concordance statistic for predicted ITE
}
\description{
Model-based concordance for benefit (mbcb)
}
\examples{
#' # generate some  data
n <- 250
x <- rnorm(n) # covariate
trt <- rbinom(n, 1, .5) # treatment
beta <- c(0, 1, 1, -.75) # coefficients
lp <- cbind(1, x, trt, x*trt) \%*\% beta # linear predictor
y <- rbinom(n, 1, plogis(lp)) # simulated y

# model
mod <- glm(y ~ x * trt, family = "binomial")

# predict ite's
control.data <- cbind(1, x, 0, 0)
treated.data <- cbind(1, x, 1, x)
y0hat <- plogis(control.data \%*\% coef(mod))
y1hat <- plogis(treated.data \%*\% coef(mod))

# mbcb
mbcb(y0hat,y1hat) # apparent mbcb

# generate external data
n <- 500
x <- rnorm(n) # covariate
trt <- rbinom(n, 1, .5) # treatment
beta <- c(0, .8, .8, -.5) # somewhat different population
lp <- cbind(1, x, trt, x*trt) \%*\% beta # linear predictor
y <- rbinom(n, 1, plogis(lp)) # simulated y

# external model
mod.ext <- glm(y ~ x * trt, family = "binomial")

# predict ite's
control.data <- cbind(1, x, 0, 0)
treated.data <- cbind(1, x, 1, x)
y0hat <- plogis(control.data \%*\% coef(mod))
y1hat <- plogis(treated.data \%*\% coef(mod))
y0hat.updated <- plogis(control.data \%*\% coef(mod.ext))
y1hat.updated <- plogis(treated.data \%*\% coef(mod.ext))

# external mbcb
mbcb(y0hat,y1hat,y0hat.updated,y1hat.updated)

# small simulation
\dontrun{
B <- 50
dev <- ext <- rep(NA, B)
for(b in 1:B){
  n <- 250
  x <- rnorm(n) # covariate
  trt <- rbinom(n, 1, .5) # treatment
  beta <- c(0, 1, 1, -.75) # coefficients
  lp <- cbind(1, x, trt, x*trt) \%*\% beta # linear predictor
  y <- rbinom(n, 1, plogis(lp)) # simulated y

  # model
  mod <- glm(y ~ x * trt, family = "binomial")

  # predict ite's
  control.data <- cbind(1, x, 0, 0)
  treated.data <- cbind(1, x, 1, x)
  y0hat <- plogis(control.data \%*\% coef(mod))
  y1hat <- plogis(treated.data \%*\% coef(mod))

  # mbcb
  dev[b] <- mbcb(y0hat,y1hat) # apparent mbcb

  # generate external data
  n <- 500
  x <- rnorm(n) # covariate
  trt <- rbinom(n, 1, .5) # treatment
  beta <- c(0, .8, .8, -.5) # somewhat different population
  lp <- cbind(1, x, trt, x*trt) \%*\% beta # linear predictor
  y <- rbinom(n, 1, plogis(lp)) # simulated y

  # external model
  mod.ext <- glm(y ~ x * trt, family = "binomial")

  # predict ite's
  control.data <- cbind(1, x, 0, 0)
  treated.data <- cbind(1, x, 1, x)
  y0hat <- plogis(control.data \%*\% coef(mod))
  y1hat <- plogis(treated.data \%*\% coef(mod))
  y0hat.updated <- plogis(control.data \%*\% coef(mod.ext))
  y1hat.updated <- plogis(treated.data \%*\% coef(mod.ext))

  # external mbcb
  ext[b] <- mbcb(y0hat,y1hat,y0hat.updated,y1hat.updated)
}
mean(dev)
mean(ext)
}
}
